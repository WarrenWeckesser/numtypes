//
//  Complex signed integers.
//
//  Requires C99.
//

#include <stdio.h>
#include <stdint.h>
#include <inttypes.h>
#include <complex.h>
#include <stdbool.h>
#include <math.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION

#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <structmember.h>
#include <numpy/arrayobject.h>
#include <numpy/arrayscalars.h>
#include <numpy/ufuncobject.h>
#include <numpy/halffloat.h>

/**begin repeat
 *
 * #typ = int8, int16, int32, int64#
 * #Typ = Int8, Int16, Int32, Int64#
 * #TYP = INT8, INT16, INT32, INT64#
 */

// ========================================================================
// Functions for working with complex signed integers.
// ========================================================================

typedef struct _complex_@typ@ {
    @typ@_t real;
    @typ@_t imag;
} complex_@typ@;


static inline void
c@typ@_print(const complex_@typ@ z, char *name)
{
    printf("%s  = %" PRId64 " + %" PRId64 "*i\n", name, (int64_t) z.real, (int64_t) z.imag);    
}

#define PRINT_c@typ@(var) c@typ@_print(var, #var)


static inline complex_@typ@
c@typ@_add(const complex_@typ@ z1, const complex_@typ@ z2)
{
    complex_@typ@ w;

    w.real = z1.real + z2.real;
    w.imag = z1.imag + z2.imag;
    return w;
}

static inline complex_@typ@
c@typ@_subtract(const complex_@typ@ z1, const complex_@typ@ z2)
{
    complex_@typ@ w;

    w.real = z1.real - z2.real;
    w.imag = z1.imag - z2.imag;
    return w;
}

static inline complex_@typ@
c@typ@_multiply(const complex_@typ@ z1, const complex_@typ@ z2)
{
    complex_@typ@ w;

    w.real = z1.real*z2.real - z1.imag*z2.imag;
    w.imag = z1.imag*z2.real + z1.real*z2.imag;
    return w;
}

static inline bool
c@typ@_equal(const complex_@typ@ z1, const complex_@typ@ z2)
{
    return (z1.real == z2.real) && (z1.imag == z2.imag);
}

static inline float
c@typ@_abs_float(const complex_@typ@ z)
{
    float complex dz = (float) z.real + I * (float) z.imag;
    return cabsf(dz);
}

static inline complex_@typ@
c@typ@_conj(const complex_@typ@ z)
{
    complex_@typ@ zc = {.real = z.real, .imag = -z.imag};
    return zc;
}

static inline double
c@typ@_abs_double(const complex_@typ@ z)
{
    double complex dz = (double) z.real + I * (double) z.imag;
    return cabs(dz);
}

static inline float
c@typ@_abs2_float(const complex_@typ@ z)
{
    return powf((float) z.real, 2) + powf((float) z.imag, 2);
}

static inline double
c@typ@_abs2_double(const complex_@typ@ z)
{
    return pow((double) z.real, 2) + pow((double) z.imag, 2);
}


static inline float complex
c@typ@_true_divide_float(const complex_@typ@ z1, const complex_@typ@ z2)
{
    // XXX check for z2 == 0?
    float complex w1 = (float) z1.real + I * (float) z1.imag;
    float complex w2 = (float) z2.real + I * (float) z2.imag;
    return w1 / w2;
}

static inline double complex
c@typ@_true_divide_double(const complex_@typ@ z1, const complex_@typ@ z2)
{
    // XXX check for z2 == 0?
    double complex w1 = (double) z1.real + I * (double) z1.imag;
    double complex w2 = (double) z2.real + I * (double) z2.imag;
    return w1 / w2;
}

// ========================================================================
// Create a Python type.
// ========================================================================

typedef struct {
    PyObject_HEAD
    complex_@typ@ value;
} PyComplex@Typ@;

// Forward declaration.
static PyTypeObject PyComplex@Typ@_Type;

static inline int
PyComplex@Typ@_Check(PyObject* object) {
    return PyObject_IsInstance(object, (PyObject*) &PyComplex@Typ@_Type);
}

static PyObject*
PyComplex@Typ@_FromComplex@Typ@(complex_@typ@ z) {
    PyComplex@Typ@* p = (PyComplex@Typ@*) PyComplex@Typ@_Type.tp_alloc(&PyComplex@Typ@_Type, 0);
    if (p) {
        p->value = z;
    }
    return (PyObject*) p;
}

//
// init will accept:
// * a tuple holding a pair of integers
// * a complex number (components will be cast to int)
//
static int
PyComplex@Typ@_init(PyComplex@Typ@ *self, PyObject *args, PyObject *kwds)
{
    static char *kwlist[] = {"value", NULL};
    PyObject *obj;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj)) {
        return -1;
    }

    if (PyTuple_Check(obj)) {
        if (PyTuple_GET_SIZE(obj) != 2) {
            PyErr_SetString(PyExc_ValueError,
                            "complex_@typ@() tuple argument must have "
                            "length 2");
            return -1;
        }
        for (int k = 0; k < 2; ++k) {
            PyObject* item =  PyTuple_GetItem(obj, k);
            if (item == NULL) {
                return -1;
            }
            if (!PyLong_Check(item)) {
                PyErr_SetString(PyExc_ValueError,
                                "values in tuple argument must be integers");
                return -1;
            }
            long long val = PyLong_AsLongLong(item);
            if (PyErr_Occurred()) {
                return -1;
            }
            if ((val > @TYP@_MAX) || (val < @TYP@_MIN)) {
                PyErr_SetString(PyExc_OverflowError, "int too big to convert to @typ@");
            }
            if (k == 0) {
                self->value.real = val;
            }
            else {
                self->value.imag = val;
            }
        }
        return 0;
    }

    if (PyComplex_Check(obj)) {
        Py_complex z = PyComplex_AsCComplex(obj);
        self->value.real = z.real;
        self->value.imag = z.imag;
        return 0;
    }

    PyErr_SetString(PyExc_TypeError,
                    "complex_@typ@() argument must be a tuple of two integers "
                    " or a complex number.");
    return -1;
}


//
// Currently only == or != between two instances of complex integers
// is supported.  Eventually behavior similar to Python's complex type
// should be supported.
//

static PyObject*
PyComplex@Typ@_richcompare(PyObject* a, PyObject* b, int op)
{
    if ((op != Py_EQ) && (op != Py_NE)) {
        PyErr_SetString(PyExc_TypeError,
                        "ordered comparison not supported with instances of complex_@typ@");
        return NULL;
    }
    if (Py_TYPE(a) == &PyComplex@Typ@_Type && Py_TYPE(b) == &PyComplex@Typ@_Type) {
        int result = c@typ@_equal(((PyComplex@Typ@ *) a)->value, ((PyComplex@Typ@ *) b)->value);
        if (op == Py_NE) {
            result = !result;
        }
        return PyBool_FromLong(result);
    }
    PyErr_SetString(PyExc_TypeError,
                    "comparison of complex_@typ@ to other types not supported");
    return NULL;
}


static PyObject*
PyComplex@Typ@_str(PyObject* self) {
    complex_@typ@ value = ((PyComplex@Typ@ *) self)->value;
    return PyUnicode_FromFormat("(%" PRId64 "%s%" PRId64 "j)",
                                (int64_t) value.real,
                                value.imag < 0 ? "" : "+",
                                (int64_t) value.imag);
}

// XXX Check this hash function.
static Py_hash_t
PyComplex@Typ@_hash(PyObject* self) {
    complex_@typ@ value = ((PyComplex@Typ@ *) self)->value;
    Py_hash_t h = ((Py_hash_t) value.imag << 32) + value.real;
    /* Never return the special error value -1 */
    return h == -1 ? 2 : h;
}

static int
PyComplex@Typ@_nb_bool(PyComplex@Typ@ *o) {
    return (o->value.real != 0) || (o->value.imag != 0);
}


// ------------------------------------------------------------------------
// Attributes and methods
// ------------------------------------------------------------------------


// XXX These two functions assume Py_ssize_t has at least as many bits
//     as int64_t.

PyObject *PyComplex@Typ@_get_real(PyObject* self, void *ignore)
{
    return PyLong_FromSsize_t((Py_ssize_t) ((PyComplex@Typ@ *)self)->value.real);
}

PyObject *PyComplex@Typ@_get_imag(PyObject* self, void *ignore)
{
    return PyLong_FromSsize_t((Py_ssize_t) ((PyComplex@Typ@ *)self)->value.imag);
}

// The 'real' and 'imag' attributes are intentionally read-only.

static PyGetSetDef PyComplex@Typ@_getset[] = {
    {"real", PyComplex@Typ@_get_real, NULL, "real part", NULL},
    {"imag", PyComplex@Typ@_get_imag, NULL, "imaginary part", NULL},
    {NULL}, // Sentinel
};

static PyObject *
PyComplex@Typ@_conj(PyComplex@Typ@ *self, PyObject *Py_UNUSED(ignored))
{
    PyComplex@Typ@ *conj = (PyComplex@Typ@ *) PyComplex@Typ@_FromComplex@Typ@(self->value);
    conj->value.imag *= -1;
    return (PyObject *) conj;
}

static PyMethodDef PyComplex@Typ@_methods[] = {
    {"conj", (PyCFunction) PyComplex@Typ@_conj, METH_NOARGS, "complex conjugate"},
    {NULL}  /* Sentinel */
};

// ------------------------------------------------------------------------
// Unary number methods
// ------------------------------------------------------------------------

static PyObject *
PyComplex@Typ@_nb_negative(PyComplex@Typ@ *o) {
    PyComplex@Typ@ *result = (PyComplex@Typ@ *) PyComplex@Typ@_FromComplex@Typ@(o->value);
    // XXX Check for failure!
    result->value.real *= -1;
    result->value.imag *= -1;
    return (PyObject *) result;
}


static PyObject *
PyComplex@Typ@_nb_positive(PyComplex@Typ@ *o) {
    return (PyObject *) o;
}


static PyObject *
PyComplex@Typ@_nb_absolute(PyComplex@Typ@ *o) {
    return (PyObject *) PyFloat_FromDouble(c@typ@_abs_double(((PyComplex@Typ@ *) o)->value));
}

// ------------------------------------------------------------------------
// Binary number methods
// ------------------------------------------------------------------------


static PyObject *
PyComplex@Typ@_nb_add(PyObject *o1, PyObject *o2)
{
    if ((Py_TYPE(o1) == &PyComplex@Typ@_Type) && (Py_TYPE(o2) == &PyComplex@Typ@_Type)) {
        // Both arguments are PyComplex@Typ@.
        complex_@typ@ value = c@typ@_add(((PyComplex@Typ@ *) o1)->value,
                                         ((PyComplex@Typ@ *) o2)->value);
        return (PyObject *) PyComplex@Typ@_FromComplex@Typ@(value);
    }
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *
PyComplex@Typ@_nb_subtract(PyObject *o1, PyObject *o2)
{
    if ((Py_TYPE(o1) == &PyComplex@Typ@_Type) && (Py_TYPE(o2) == &PyComplex@Typ@_Type)) {
        // Both arguments are PyComplex@Typ@.
        complex_@typ@ value = c@typ@_subtract(((PyComplex@Typ@ *) o1)->value,
                                              ((PyComplex@Typ@ *) o2)->value);
        return (PyObject *) PyComplex@Typ@_FromComplex@Typ@(value);
    }
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *
PyComplex@Typ@_nb_multiply(PyObject *o1, PyObject *o2)
{
    if ((Py_TYPE(o1) == &PyComplex@Typ@_Type) && (Py_TYPE(o2) == &PyComplex@Typ@_Type)) {
        // Both arguments are PyComplex@Typ@.
        complex_@typ@ value = c@typ@_multiply(((PyComplex@Typ@ *) o1)->value,
                                              ((PyComplex@Typ@ *) o2)->value);
        return (PyObject *) PyComplex@Typ@_FromComplex@Typ@(value);
    }
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


// Python number protocol methods for complex_@typ@.

static PyNumberMethods PyComplex@Typ@_as_number = {
    .nb_add          = PyComplex@Typ@_nb_add,
    .nb_subtract     = PyComplex@Typ@_nb_subtract,
    .nb_multiply     = PyComplex@Typ@_nb_multiply,
    .nb_negative     = (unaryfunc) PyComplex@Typ@_nb_negative,
    .nb_positive     = (unaryfunc) PyComplex@Typ@_nb_positive,
    .nb_absolute     = (unaryfunc) PyComplex@Typ@_nb_absolute,
    .nb_bool         = (inquiry) PyComplex@Typ@_nb_bool,
    //.nb_floor_divide = pynint32_nb_floor_divide,
    //.nb_true_divide  = pynint32_nb_true_divide,
};

// Python type object for complex_@typ@.

static PyTypeObject PyComplex@Typ@_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    .tp_name        = "complex_@typ@",
    .tp_basicsize   = sizeof(PyComplex@Typ@),
    .tp_repr        = PyComplex@Typ@_str,
    .tp_as_number   = &PyComplex@Typ@_as_number,
    .tp_hash        = PyComplex@Typ@_hash,
    .tp_str         = PyComplex@Typ@_str,
    .tp_flags       = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
    .tp_doc         = "complex @typ@ (work in progress)",
    .tp_richcompare = PyComplex@Typ@_richcompare,
    .tp_init        = (initproc) PyComplex@Typ@_init,
    .tp_new         = PyType_GenericNew,
    .tp_getset      = PyComplex@Typ@_getset,
    .tp_methods     = PyComplex@Typ@_methods
};


// ========================================================================
// NumPy support.
// ========================================================================

// ------------------------------------------------------------------------
// Functions to be put in the PyArray_ArrFuncs structure.
// ------------------------------------------------------------------------

static PyObject*
NPComplex@Typ@_f_getitem(void* data, void* arr) {
    PyObject *p = PyComplex@Typ@_FromComplex@Typ@(*((complex_@typ@ *) data));
    return p;
}

static int
NPComplex@Typ@_f_setitem(PyObject* item, void* data, void* arr) {
    if (PyComplex@Typ@_Check(item)) {
        *((complex_@typ@ *)data) = ((PyComplex@Typ@ *) item)->value;
        return 0;
    }
    PyErr_SetString(PyExc_TypeError, "only complex_@typ@ values may be assigned");
    return -1;
}


static inline void
copyswap_@typ@(@typ@_t *dst, @typ@_t *src) {
    char *from = (char *) src;
    char *to = (char *) (dst + 1);
    for (size_t i = 0; i < sizeof(@typ@_t); ++i) {
        --to;
        *to = *from;
        ++from;
    }
}

static void
NPComplex@Typ@_f_copyswap(void* dst, void* src, int swap, void* arr) {
    complex_@typ@ *cdst = (complex_@typ@ *) dst;
    complex_@typ@ *csrc = (complex_@typ@ *) src;
    if (!src) {
        return;
    }
    if (swap) {
        copyswap_@typ@(&(cdst->real), &(csrc->real));
        copyswap_@typ@(&(cdst->imag), &(csrc->imag));
    }
    else {
        *cdst = *csrc;
    }
}

// XXX This can be simplified...

static void
NPComplex@Typ@_f_copyswapn(void* dst_, npy_intp dstride,
                           void* src_, npy_intp sstride,
                           npy_intp n, int swap, void* arr) {
    char *dst = (char *) dst_;
    char *src = (char * )src_;
    if (!src) {
        return;
    }
    if (swap) {
        for (npy_intp i = 0; i < n; i++) {
            NPComplex@Typ@_f_copyswap(dst, src, swap, arr);
            dst += dstride;
            src += sstride;
        }
    }
    else if (dstride == sizeof(complex_@typ@) && sstride == sizeof(complex_@typ@)) {
        // Each array is contiguous, so we can use a single call to memcpy.
        memcpy(dst, src, n*sizeof(complex_@typ@));
    }
    else {
        for (npy_intp i = 0; i < n; i++) {
            NPComplex@Typ@_f_copyswap(dst, src, swap, arr);
            dst += dstride;
            src += sstride;
        }
    }
}

static npy_bool
NPComplex@Typ@_f_nonzero(void* data, void* arr) {
    complex_@typ@ *z = (complex_@typ@ *) data;
    return (z->real == 0 && z->imag == 0) ? NPY_FALSE : NPY_TRUE;
}

// ------------------------------------------------------------------------
// Functions for casting from complex_@typ@ to NumPy builtin complex
// data types.  These will be assigned to the appropriate slots in
// the array NPComplex@Typ@_arrfuncs.cast[].
// ------------------------------------------------------------------------

#define DEFINE_CONVERTER_@TYP@(type)                \
    static type                                     \
    complex_@typ@_as_##type(complex_@typ@ value)    \
    {                                               \
        type z;                                     \
        z.real = value.real;                        \
        z.imag = value.imag;                        \
        return z;                                   \
    }

DEFINE_CONVERTER_@TYP@(npy_cfloat)
DEFINE_CONVERTER_@TYP@(npy_cdouble)
DEFINE_CONVERTER_@TYP@(npy_clongdouble)

#define CREATE_CAST_COMPLEX_@TYP@_TO(type)                                  \
    static void                                                             \
    npy_cast_complex_@typ@_to_##type(void* from, void* to, npy_intp n,      \
                                     void* fromarr, void* toarr)            \
    {                                                                       \
        for (npy_intp i = 0; i < n; ++i) {                                  \
            ((type *) to)[i] =                                              \
                complex_@typ@_as_##type(((complex_@typ@ *) from)[i]);       \
        }                                                                   \
    }

CREATE_CAST_COMPLEX_@TYP@_TO(npy_cfloat)
CREATE_CAST_COMPLEX_@TYP@_TO(npy_cdouble)
CREATE_CAST_COMPLEX_@TYP@_TO(npy_clongdouble)

static PyArray_ArrFuncs NPComplex@Typ@_arrfuncs = {
    .getitem    = NPComplex@Typ@_f_getitem,
    .setitem    = NPComplex@Typ@_f_setitem,
    .copyswapn  = NPComplex@Typ@_f_copyswapn,
    .copyswap   = NPComplex@Typ@_f_copyswap,
    .nonzero    = NPComplex@Typ@_f_nonzero,
    .cast       = {[NPY_CFLOAT]      = npy_cast_complex_@typ@_to_npy_cfloat,
                   [NPY_CDOUBLE]     = npy_cast_complex_@typ@_to_npy_cdouble,
                   [NPY_CLONGDOUBLE] = npy_cast_complex_@typ@_to_npy_clongdouble},
};


PyArray_Descr NPComplex@Typ@_descr = {
    PyObject_HEAD_INIT(0)
    .typeobj    = &PyComplex@Typ@_Type,
    .kind       = 'x',
    .type       = 'x',
    .byteorder  = '=',
    /*
     * For now, we need NPY_NEEDS_PYAPI in order to make numpy detect our
     * exceptions.  This isn't technically necessary,
     * since we're careful about thread safety, and hopefully future
     * versions of numpy will recognize that.
     * XXX The above comment was copied to here.  I haven't looked into
     *     the details.
     */
    .flags      = NPY_NEEDS_PYAPI | NPY_USE_GETITEM | NPY_USE_SETITEM,
    .elsize     = sizeof(complex_@typ@),
    .alignment  = offsetof(struct {char c; complex_@typ@ value;}, value),
    .f          = &NPComplex@Typ@_arrfuncs
};

// ------------------------------------------------------------------------
// Functions for converting some of NumPy's builtin types to complex_@typ@.
// These will be registered with the NumPy dtype when the extension module
// is initialized.
// ------------------------------------------------------------------------

/**begin repeat1
 *
 * #fromctyp = float, double, long double, int8_t, int16_t, int32_t, int64_t#
 * #fromityp = float, double, long_double, int8,   int16,   int32,   int64#
 */

static void
cast_npy_@fromityp@_to_complex_@typ@(void* from, void* to, npy_intp n,
                                     void* fromarr, void* toarr)
{
    for (npy_intp i = 0; i < n; ++i) {
        @fromctyp@ from_value = ((@fromctyp@ *) from)[i];
        ((complex_@typ@ *) to)[i].real = (@typ@_t) from_value;
        ((complex_@typ@ *) to)[i].imag = (@typ@_t) 0;
    }
}

/**end repeat1**/

// ------------------------------------------------------------------------
// ufunc inner loop functions.
// ------------------------------------------------------------------------

void NPComplex@Typ@_ufunc_abs(char** args, npy_intp* dimensions,
                              npy_intp* steps, void* data)
{
    char *i0 = args[0];
    char  *o = args[1];

    npy_intp n = *dimensions;

    npy_intp is0 = steps[0];
    npy_intp os = steps[1];

    for (npy_intp k = 0; k < n; k++, i0 += is0, o += os) {
        complex_@typ@ z0 = *(complex_@typ@ *)i0;
        *(double *)o = c@typ@_abs_double(z0);
    }
}

void NPComplex@Typ@_ufunc_conj(char** args, npy_intp* dimensions,
                               npy_intp* steps, void* data)
{
    char *i0 = args[0];
    char  *o = args[1];

    npy_intp n = *dimensions;

    npy_intp is0 = steps[0];
    npy_intp os = steps[1];

    for (npy_intp k = 0; k < n; k++, i0 += is0, o += os) {
        complex_@typ@ z0 = *(complex_@typ@ *)i0;
        *(complex_@typ@ *)o = c@typ@_conj(z0);
    }
}

#define BINARY_UFUNC_@TYP@(name)                                            \
    void NPComplex@Typ@_ufunc_##name(char** args, npy_intp* dimensions,     \
                                     npy_intp* steps, void* data)           \
    {                                                                       \
        char *i0 = args[0];                                                 \
        char *i1 = args[1];                                                 \
        char  *o = args[2];                                                 \
                                                                            \
        npy_intp n = *dimensions;                                           \
                                                                            \
        npy_intp is0 = steps[0];                                            \
        npy_intp is1 = steps[1];                                            \
        npy_intp os = steps[2];                                             \
                                                                            \
        for (npy_intp k = 0; k < n; k++, i0 += is0, i1 += is1, o += os) {   \
            complex_@typ@ z0 = *(complex_@typ@ *)i0;                        \
            complex_@typ@ z1 = *(complex_@typ@ *)i1;                        \
            *(complex_@typ@ *)o = c@typ@_##name(z0, z1);                    \
        }                                                                   \
    }

BINARY_UFUNC_@TYP@(add)
BINARY_UFUNC_@TYP@(subtract)
BINARY_UFUNC_@TYP@(multiply)

/**end repeat**/

// ------------------------------------------------------------------------
// Functions for casting between complex_int types.
// ------------------------------------------------------------------------

/**begin repeat
 *
 * #typ = int8, int16, int32, int64#
 * #Typ = Int8, Int16, Int32, Int64#
 * #TYP = INT8, INT16, INT32, INT64#
 * #typeindex = 1, 2, 3, 4#
 */


/**begin repeat1
 *
 * #typ2 = int8, int16, int32, int64#
 * #Typ2 = Int8, Int16, Int32, Int64#
 * #TYP2 = INT8, INT16, INT32, INT64#
 * #typeindex2 = 1, 2, 3, 4#
 */

#if @typeindex@ != @typeindex2@
static void
cast_complex_@typ@_to_complex_@typ2@(void* from, void* to, npy_intp n,
                                     void* fromarr, void* toarr)
{
    for (npy_intp i = 0; i < n; ++i) {
        complex_@typ@ from_value = ((complex_@typ@ *) from)[i];
        ((complex_@typ2@ *) to)[i].real = from_value.real;
        ((complex_@typ2@ *) to)[i].imag = from_value.imag;
    }
}

#endif

/**end repeat1**/ 

/**end repeat**/

// ========================================================================
// Python extension module definition.
// ========================================================================

PyMethodDef module_methods[] = {
    {0} // sentinel
};

static struct PyModuleDef moduledef = {
    .m_base     = PyModuleDef_HEAD_INIT,
    .m_name     = "_complex_int",
    .m_size     = -1,
    .m_methods  = module_methods,
};


PyMODINIT_FUNC
PyInit__complex_int(void) {
    int check;
    PyObject* m = NULL;
    PyObject* numpy_str = NULL;
    PyObject* numpy = NULL;
    PyUFuncObject *ufunc_abs = NULL;
    PyUFuncObject *ufunc_conj = NULL;
    PyUFuncObject *ufunc_add = NULL;
    PyUFuncObject *ufunc_subtract = NULL;
    PyUFuncObject *ufunc_multiply = NULL;

    //
    // Initialize numpy and numpy_umath.
    //
    import_array();
    if (PyErr_Occurred()) {
        return NULL;
    }

    import_umath();
    if (PyErr_Occurred()) {
         return NULL;
    }

    numpy_str = PyUnicode_FromString("numpy");
    if (!numpy_str) {
        goto cleanup;
    }

    numpy = PyImport_Import(numpy_str);
    Py_DECREF(numpy_str);
    if (!numpy) {
        goto cleanup;
    }

    // Fetch the numpy ufuncs abs, conj, add, subtract, multiply...

    ufunc_abs = (PyUFuncObject*) PyObject_GetAttrString(numpy, "abs");
    if (!ufunc_abs) {
        goto cleanup;
    }

    ufunc_conj = (PyUFuncObject*) PyObject_GetAttrString(numpy, "conj");
    if (!ufunc_conj) {
        goto cleanup;
    }

    ufunc_add = (PyUFuncObject*) PyObject_GetAttrString(numpy, "add");
    if (!ufunc_add) {
        goto cleanup;
    }

    ufunc_subtract = (PyUFuncObject*) PyObject_GetAttrString(numpy, "subtract");
    if (!ufunc_subtract) {
        goto cleanup;
    }

    ufunc_multiply = (PyUFuncObject*) PyObject_GetAttrString(numpy, "multiply");
    if (!ufunc_multiply) {
        goto cleanup;
    }

    /**begin repeat
     *
     * #typ = int8, int16, int32, int64#
     * #Typ = Int8, Int16, Int32, Int64#
     * #TYP = INT8, INT16, INT32, INT64#
     */

    // ----------------------------------------------------------------
    // Set up the Python type complex_@typ@
    // ----------------------------------------------------------------

    // Can't set this until we import numpy
    PyComplex@Typ@_Type.tp_base = &PyGenericArrType_Type;

    // Initialize PyComplex@Typ@ type object
    if (PyType_Ready(&PyComplex@Typ@_Type) < 0) {
        goto cleanup;
    }

    // ----------------------------------------------------------------
    // Set up the NumPy dtype
    // ----------------------------------------------------------------

    Py_TYPE(&NPComplex@Typ@_descr) = &PyArrayDescr_Type;
    int npy_complex_@typ@ = PyArray_RegisterDataType(&NPComplex@Typ@_descr);
    if (npy_complex_@typ@ < 0) {
        goto cleanup;
    }

    // Support complex_@typ@.dtype
    if (PyDict_SetItemString(PyComplex@Typ@_Type.tp_dict, "dtype",
                             (PyObject*) &NPComplex@Typ@_descr) < 0) {
        goto cleanup;
    }

    // ----------------------------------------------------------------
    // Register ufuncs
    // ----------------------------------------------------------------

    int ufunc_@typ@_abs_types[] = {npy_complex_@typ@, NPY_DOUBLE};

    check = PyUFunc_RegisterLoopForType(ufunc_abs, npy_complex_@typ@,
                                        NPComplex@Typ@_ufunc_abs,
                                        ufunc_@typ@_abs_types, 0);
    if (check < 0) {
        goto cleanup;
    }

    int ufunc_@typ@_conj_types[] = {npy_complex_@typ@, npy_complex_@typ@};

    check = PyUFunc_RegisterLoopForType(ufunc_conj, npy_complex_@typ@,
                                        NPComplex@Typ@_ufunc_conj,
                                        ufunc_@typ@_conj_types, 0);
    if (check < 0) {
        goto cleanup;
    }

    int binary_@typ@_ufunc_types[] = {npy_complex_@typ@,
                                npy_complex_@typ@,
                                npy_complex_@typ@};

    #define REGISTER_BINARY_@TYP@_UFUNC(name) {                                 \
        int check;                                                              \
        check = PyUFunc_RegisterLoopForType(ufunc_##name, npy_complex_@typ@,    \
                                            NPComplex@Typ@_ufunc_##name,        \
                                            binary_@typ@_ufunc_types, 0);       \
        if (check < 0) {                                                        \
            goto cleanup;                                                       \
        }                                                                       \
    }

    REGISTER_BINARY_@TYP@_UFUNC(add)
    REGISTER_BINARY_@TYP@_UFUNC(subtract)
    REGISTER_BINARY_@TYP@_UFUNC(multiply)

    // ----------------------------------------------------------------
    // Register casting from some NumPy builtin types to complex_@typ@.
    // ----------------------------------------------------------------

    /**begin repeat1
     *
     * #fromityp = float, double, long_double, int8, int16, int32, int64#
     * #FROMTYP  = FLOAT, DOUBLE, LONGDOUBLE, INT8, INT16, INT32, INT64#
     */
    if (PyArray_RegisterCastFunc(PyArray_DescrFromType(NPY_@FROMTYP@),
                                 npy_complex_@typ@,
                                 cast_npy_@fromityp@_to_complex_@typ@) < 0) {
        goto cleanup;
    }
    if (PyArray_RegisterCanCast(PyArray_DescrFromType(NPY_@FROMTYP@),
                                npy_complex_@typ@,
                                NPY_NOSCALAR) < 0) {
        goto cleanup;
    }
    /**end repeat1**/

    /**end repeat**/

    // ----------------------------------------------------------------
    // Casting between complex_int types.
    // ----------------------------------------------------------------

    /**begin repeat
     *
     * #typ = int8, int16, int32, int64#
     * #typeindex = 1, 2, 3, 4#
     */

    /**begin repeat1
     *
     * #typ2 = int8, int16, int32, int64#
     * #typeindex2 = 1, 2, 3, 4#
     */

    #if @typeindex@ != @typeindex2@
    if (PyArray_RegisterCastFunc(PyArray_DescrFromType(npy_complex_@typ@),
                                 npy_complex_@typ2@,
                                 cast_complex_@typ@_to_complex_@typ2@) < 0) {
        goto cleanup;
    }
    #endif
    #if @typeindex@ < @typeindex2@
    if (PyArray_RegisterCanCast(PyArray_DescrFromType(npy_complex_@typ@),
                                npy_complex_@typ2@,
                                NPY_NOSCALAR) < 0) {
        goto cleanup;
    }
    #endif

    /**end repeat1**/

    /**end repeat**/

    // ----------------------------------------------------------------
    // Finish the extension module creation.
    // ----------------------------------------------------------------  

    // Create module
    m = PyModule_Create(&moduledef);
    if (!m) {
        goto cleanup;
    }

/**begin repeat
 *
 * #typ = int8, int16, int32, int64#
 * #Typ = Int8, Int16, Int32, Int64#
 */
    // Add complex_@typ@ type
    Py_INCREF(&PyComplex@Typ@_Type);
    PyModule_AddObject(m, "complex_@typ@", (PyObject*) &PyComplex@Typ@_Type);

/**end repeat**/

cleanup:
    Py_XDECREF(ufunc_abs);
    Py_XDECREF(ufunc_conj);
    Py_XDECREF(ufunc_add);
    Py_XDECREF(ufunc_subtract);
    Py_XDECREF(ufunc_multiply);

    return m;
}
